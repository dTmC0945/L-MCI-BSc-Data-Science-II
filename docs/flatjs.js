/**
   FlatJS - an opiniotated script file to improve the content
   presented in the website generated by tex4ht + ParSnip

   (-DTMc, 2025)
**/

/*
  The following code adds the necessary hooks to add auto
  code higlightinging to any code with a <pre><div> ...
  tag.
*/

$(document).ready(function () {
    $('pre div').each(function (i, e) {


        hljs.addPlugin(
            new CopyButtonPlugin({
                callback: (text, el) => console.log("Copied to clipboard", text),
            })
        );

        hljs.highlightElement(e);

        hljs.highlightAll(e);
    });

    $('p').each(function() {
    const $this = $(this);
    if($this.html().replace(/\s|&nbsp;/g, '').length === 0)
        $this.remove();
});
});

/* 
   Adds a "Copy" button to the code block for easy copying of
   code
*/





// Executie highlight all


$(document).ready(function () {
    // //vat NoOfSections = $('.section-head').length;
    // let secCount = 1;
    // let section = "section";
    // secHeader = section.concat("-",secCount);
    // secHeaderToHide =':not(#' + secHeader + ')';
    // $('body > div.page >' + secHeaderToHide).hide();  // hide everything that isn't #myDiv
    // $('#'.concat(secHeader)).appendTo('div.page');  // move #myDiv up to the body
});


function CreateNavDots() {

    let sections = document.getElementsByClassName("section-head")

    for (let i = 0; i < sections.length; i++) {

        var navdot = document.createElement("a");
        let sec_val = i + 1
        navdot.className = "dot-" + sec_val;
        navdot.style.height = "12px";
        navdot.style.width = "12px";
        navdot.style.borderRadius = "50%";
        navdot.style.backgroundColor = "#29313d";
        navdot.style.margin = "0 10px 0 10px";
        navdot.style.display = "inline-block";
        navdot.onclick = function () { secCount = i + 1; hideSections(); updateNavDots(); };

        document.getElementsByClassName("section-control")[0].append(navdot);
    }
}

function CreatePerSectionButton() {

    var per_section_button = document.createElement("aside");
    per_section_button.innerHTML =
        '<a onclick="showAllSections()" style="font-size: 16px">Per Chapter View</a>';

    per_section_button.className = "per-section-view";
    per_section_button.style.display = "inline-block";

    document.getElementsByClassName("section-control")[0]
        .append(per_section_button);

}

// window.onload = function () {
//     //CreatePerSectionButton();
//     //CreateNavDots();
// }


function showAllSections() {

    $(".section-head").each(function () {

        $(this).fadeIn("slow");

        $("h1").show();
    });

    $(".subsectionToc").each(function () {

        $(this).fadeIn("slow");

    });

    $('#prev-section').fadeOut("slow");
    $('#next-section').fadeOut("slow");
    $('.per-section-view').fadeOut("slow");

    $("[class^=dot-]").each(function () {

        $(this).fadeOut("slow");
        $(this).remove();

    });

    let sectionView = document.createElement("a");

    sectionView.className = "section-view";
    sectionView.onclick = function () {
        secCount = 1;
        hideSections();
        $('#prev-section').fadeIn("slow");
        $('#next-section').fadeIn("slow");
        $('#prev-section').fadeIn("slow");
        $('.per-section-view').fadeIn("slow");
        CreateNavDots();
        updateNavDots();
        $('.section-view')
            .fadeOut("slow")
            .remove();
    };

    var sectionViewText = document
        .createTextNode("View Per Section");

    sectionView
        .appendChild(sectionViewText);

    document
        .getElementsByClassName("section-control")[0]
        .append(sectionView);



}

// function hideSections() {

//     $(".section-head").each(function () {
//         let section = "section";
//         secHeader = section.concat("-", secCount);
//         secHeaderToHide = ":not(#" + secHeader + ")";

//         if ($(this).attr("id") == secHeader) {
//             $(this).fadeIn("slow");
//         } else {
//             $(this).fadeOut("slow");
//         }

//         $("h1").show();
//     });



// }


// function updateTOC() {

//     $(".subsectionToc").each(function () {

//         toc_header = $(this).children('small').text().match(/\d.(\d).\d/)[1];
//         if (Number(toc_header) === secCount) {
//             $(this).fadeIn("slow");
//         } else {
//             $(this).fadeOut("slow");
//         }


//     });

// }

/**
 * Creates a go Next action which shows the next section to view.
 */
// function goNext() {

//     hideSections();

//     updateNavDots();

//     if (secCount < $(".section-head").length) {
//         secCount++;
//     }

//     $(".ch-toc").each(function () {
//         let toc_section = "toc-section";

//         tocHeader = toc_section.concat("-", tocCount);

//         tocHeaderToHide = ":not(#" + tocHeader + ")";

//         if ($(this).attr("id") == tocHeader) {
//             $(this).fadeIn("slow");
//         } else {
//             $(this).fadeOut("slow");
//         }
//     });

//     if (tocCount < $(".ch-toc").length) {
//         tocCount++;
//     }
// }



// function updateNavDots() {

//     $("[class^=dot-]").each(function () {

//         let dot = "dot";
//         dotHeader = dot.concat("-", secCount);
//         dotHeaderToHide = ":not(#" + dotHeader + ")";

//         if ($(this).attr("class") == dotHeader) {
//             $(this).css('background-color', '#29313d')
//                 .css('border', '0.1rem solid #29313d');
//         } else {
//             $(this).css('background-color', 'white')
//                 .css('border', '0.1rem solid #29313d');
//         }

//         $("h1").show();

//     });
// }


// function goPrev() {
//     if (secCount == 1) {
//         return 0;
//     } else if (secCount > 1) {
//         secCount--;
//     }

//     hideSections();
//     updateNavDots();


//     $(".ch-toc").each(function () {
//         if (tocCount == 1) {
//             return 0;
//         } else if (tocCount > 1) {
//             tocCount--;
//         }

//         let toc_section = "toc-section";

//         tocHeader = toc_section.concat("-", tocCount);

//         tocHeaderToHide = ":not(#" + tocHeader + ")";

//         if ($(this).attr("id") == tocHeader) {
//             $(this).fadeIn("slow");
//         } else {
//             $(this).fadeOut("slow");
//         }
//     });
// }

$(document).ready(function () {
    //goPrev();
    //goNext();

    $('.eq-no').css('text-align', 'right');

    $('h2').css('line-height', '1.3');

    $('button:contains("Open in Overleaf")').hide()

});

var overlaps = (function () {
    function getPositions(elem) {
        var pos, width, height;
        pos = $(elem).position();
        width = $(elem).width() / 2;
        height = $(elem).height();
        return [[pos.left, pos.left + width], [pos.top, pos.top + height]];
    }

    function comparePositions(p1, p2) {
        var r1, r2;
        r1 = p1[0] < p2[0] ? p1 : p2;
        r2 = p1[0] < p2[0] ? p2 : p1;
        return r1[1] > r2[0] || r1[0] === r2[0];
    }

    return function (a, b) {
        var pos1 = getPositions(a),
            pos2 = getPositions(b);
        return comparePositions(pos1[0], pos2[0]) && comparePositions(pos1[1], pos2[1]);
    };
})();

const allHTMLTags = document.getElementsByTagName("aside");

secCount = 1;
tocCount = 1;

$(document).ready(function () {

    //Check to see if the window is top if not then display button
    $(window).scroll(function () {
        if ($(this).scrollTop() > 100) {
            $(".scrollToTop").fadeIn();
        } else {
            $(".scrollToTop").fadeOut();
        }
    });

    //Click event to scroll to top
    $(".scrollToTop").click(function () {
        $("html, body").animate({ scrollTop: 0 }, 800);
        return false;
    });

    let list = document.querySelectorAll('.sectionToc');
    for (var i = 0; i < list.length; i++) {
        list[i].addEventListener('click', (e) => {
            console.log();
        })
    }
    // goPrev();
    //goNext();

    for (var i = 0; i < allHTMLTags.length - 1; i++) {
        if (overlaps(allHTMLTags[i], allHTMLTags[i + 1])) {

            currentMargin = window.
                getComputedStyle(allHTMLTags[i + 1]).
                getPropertyValue('margin-top');

            //console.log(parseInt(currentMargin, 10));

            allHTMLTags[i + 1].style.marginTop = parseInt(currentMargin, 10) + 50 + "px";
        }

    }
});



// basic DOM functions
// based on http://blog.adtile.me/2014/01/16/a-dive-into-plain-javascript/
var q = document.querySelectorAll.bind(document);
Element.prototype.on = Element.prototype.addEventListener;
var createEl = function (el, cls, text) {
    var x = document.createElement(el);
    x.setAttribute("class", cls);
    if (text) {
        var t = document.createTextNode(text);
        x.appendChild(t);
    }
    return x;
}

var bibdoc = null;

var isBibbox = function () {
    return q("#bibbox").length > 0;
}

var makeBibTooltip = function (bib, id, el) {
    if (!isBibbox()) {
        var xxx = bib.querySelector(id).parentNode.cloneNode(true);
        var parentpos = el.getBoundingClientRect();
        var tip = document.createElement("div");
        tip.setAttribute("id", "bibbox")
        tip.style.position = "fixed";
        tip.style.borderLeft = "6px solid #e2be9f"
        tip.style.top = parentpos.bottom + 10 + "px";
        tip.style.left = parentpos.left - 400 + "px";
        tip.appendChild(xxx);
        document.body.appendChild(tip);
    }
}
var getBibDoc = function (url, id, el) {
    if (!bibdoc) {
        var ajax = new XMLHttpRequest();
        console.log("Load ajax" + url)
        bibdoc = ajax.open("GET", url, true);
        ajax.send();
        ajax.onreadystatechange = function () {
            if (ajax.readyState == 4 && ajax.status == 200 && !bibdoc) {
                var res = ajax.responseText;
                bibdoc = createEl("div", "bib");
                bibdoc.innerHTML = res;
                makeBibTooltip(bibdoc, id, el);
            }
        }
    } else {
        makeBibTooltip(bibdoc, id, el);
    }
}

document.addEventListener("DOMContentLoaded", function () {
    var bibs = q("span.cite");
    for (i = 0; i < bibs.length; i++) {
        bibs[i].on("mouseover", function (e) {
            var el = e.currentTarget;
            var link = el.querySelector("a");
            var hash = link.hash;
            var href = link.getAttribute("href");
            getBibDoc(href, hash, el);
            //var target = bib.querySelector("body");
            //console.log("nazdar "+ target);
        });
    }
});

document.addEventListener("click", function () {
    if (isBibbox()) {
        var bibbox = q("#bibbox");
        for (i = 0; i < bibbox.length; i++) {
            bibbox[i].remove();
        }
    }
});


function file(download_link) {
    const anchor = document.createElement("a");
    anchor.href = download_link;
    anchor.download = "";
    document.body.appendChild(anchor);
    anchor.click();
}
